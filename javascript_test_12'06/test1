2 q first and last element of position of element in sorted array
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var searchRange = function(nums, target) {
  var count=0;
  var a=[];
  for(var i=0;i<nums.length;i++)
  {
      if(nums[i]==target)
      {
         a.push(i);
         count++;
      }

  }  
  if(count>0)
  {
      return a;
  }
  else
  {
      return[-1,-1];
  }
};


 1 q sum of two element
 
 /**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    for(var i=0;i<nums.length;i++)
    {
        for(var j=i+1;j<nums.length;j++)
        {
               if(nums[i]+nums[j]==target)
               {
                   var a=[];
                   a.push(i,j);
                   return a;
               }
        }
        
    }
};

3 q implement an algorithm that runs in O(n) time and uses constant extra space. to find missing value element
/**
 * @param {number[]} nums
 * @return {number}
 */
var firstMissingPositive = function(nums) {
  /*  for(i=0;i<nums.length;i++)
    {
        if(nums[i]<0)
        {
            nums[i]=(-nums[i]);
        }
    }
    console.log(nums)
    for (var i=0;i<nums.length;i++)
    {
        c=nums[i];
        if(nums[c]>0)
        {
                nums[c]=(-nums[c]);
        }
       
    }
    console.log(nums);
    for( var i=0;i<nums.length;i++)
    {
        if(nums[i]==0)
        {
            nums.splice(i,1);
        }
    }
    console.log(nums);
    for(var i=0;i<nums.length;i++)
    {
        
    }*/
    var nums=nums.sort( function(a,b)
    {
        return a-b;
    })
    console.log(nums);
for(var i=0;i<nums.length;i++)
{
    if(nums[i]==0)
    {
        nums.splice(i,1);
    }
    else if(nums[i]<0)
    {
        nums.splice(i,1);
    }
}
console.log(nums);
for(var i=0;i<nums.length;i++)
{
    if((nums[i]+1)!=nums[i+1])
    {
        return(nums[i+1]-nums[i]);
    }
    
}

};



